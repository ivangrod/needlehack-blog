<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ESP8266 | Home Assistant]]></title>
  <link href="https://ivangrod.github.io/blog/categories/esp8266/atom.xml" rel="self"/>
  <link href="https://ivangrod.github.io/"/>
  <updated>2025-09-23T17:02:13+00:00</updated>
  <id>https://ivangrod.github.io/</id>
  <author>
    <name><![CDATA[Home Assistant]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[esphomelib - A comprehensive solution for using ESPs with Home Assistant]]></title>
    <link href="https://ivangrod.github.io/blog/2018/06/05/esphomelib/"/>
    <updated>2018-06-05T06:24:55+00:00</updated>
    <id>https://ivangrod.github.io/blog/2018/06/05/esphomelib</id>
    <content type="html"><![CDATA[<p>The <a href="https://www.espressif.com/products/socs/esp8266">ESP8266</a> and <a href="https://www.espressif.com/products/socs/esp32">ESP32</a> are dirt cheap WiFi-enabled microcontrollers that have established themselves as the base for many DIY home automation projects. Even quite a few manufacturers like iTead with their Sonoff devices have chosen these controllers because of their competitive price.</p>
<p>Setting up these microcontrollers for some basic functionality has also gotten really easy over the years with popular projects like ESPEasy or Sonoff-Tasmota: You just download their firmware and flash it onto your chip. But if you‚Äôve ever tried to go a bit beyond the basic set of functions of those frameworks and tried to do some customization, you will have probably noticed that it‚Äôs not that easy. Often times you‚Äôll end up having to download some Arduino code project from the internet and customizing it to your needs.</p>
<p>This is where esphomelib comes in: The <a href="https://esphome.io/">esphomelib suite</a> is a set of tools that are designed with the goal of achieving the best possible user experience.  esphomelib a) allows for lots of customization without touching <em>a single line</em> of code and b) has complete Home Assistant integration. Inside the esphomelib ecosystem, you essentially just have to write a simple YAML configuration file. The rest like compiling, flashing, uploading etc. will then be taken care of automatically.</p>
<!--more-->
<h2>Installation</h2>
<p>An example probably illustrates this the best. To use esphomeyaml, there are two main ways: From a <a href="https://esphome.io/guides/getting_started_hassio.html">HassIO add-on</a>, or from the <a href="https://esphome.io/guides/getting_started_command_line.html">command line</a>. For the esphomeyaml add-on, you just have to add ‚Äú<a href="https://github.com/esphome/esphome">https://github.com/esphome/esphome</a>‚Äù as an add-on repository (see <a href="/hassio/installing_third_party_addons/">Installing third party add-ons</a>). Then select and install ‚Äúesphomeyaml‚Äù and wait for the installation to complete. After that, you will be able to start the add-on and view the web interface.</p>
<p>From the command line you just need to install the <strong>Python 2</strong> package using the pip command seen below. Then visit <code>localhost:6052</code> to view the dashboard.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash">pip2 <span class="nb">install </span>esphomeyaml
esphomeyaml config/ dashboard
<span class="c"># Alternative for docker users:</span>
docker run <span class="nt">--rm</span> <span class="nt">-p</span> 6052:6052 <span class="nt">-p</span> 6123:6123 <span class="nt">-v</span> <span class="s2">"</span><span class="nv">$PWD</span><span class="s2">"</span>:/config ottowinter/esphomeyaml /config dashboard
</code></pre></div></div>
<div class="videoWrapper">
  <iframe width="853" height="480" src="https://www.youtube-nocookie.com/embed/uWZmc_MjSWs?rel=0&amp;showinfo=0loop=1&amp;autoplay=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
</div>
<p>Once in the dashboard interface, you will be greeted by a small setup wizard that will help you get started with esphomeyaml and create a basic configuration. You should end up with a configuration file like this.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="yaml"><span class="na">esphomeyaml</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">livingroom</span>
  <span class="na">platform</span><span class="pi">:</span> <span class="s">ESP8266</span>
  <span class="na">board</span><span class="pi">:</span> <span class="s">nodemcuv2</span>

<span class="na">wifi</span><span class="pi">:</span>
  <span class="na">ssid</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MySSID"</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyPassword"</span>

<span class="na">mqtt</span><span class="pi">:</span>
  <span class="na">broker</span><span class="pi">:</span> <span class="s2">"</span><span class="s">192.168.178.83"</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>

<span class="na">logger</span><span class="pi">:</span>
<span class="na">ota</span><span class="pi">:</span>
</code></pre></div></div>
<p>At this point, you can already flash the firmware. To do this, first plug in the USB cable of the ESP into a USB port of the device esphomeyaml is running on and wait until you see a ‚ÄúDiscovered new serial port‚Äù message (in some cases you need to restart the add-on). Select the upload port in the top navigation bar and press the big ‚ÄúUPLOAD‚Äù button. If everything succeeds, you should now have a functioning esphomelib node and see the debug logs üéâ</p>
<h2>Adding some basic functionality</h2>
<p>Above configuration is, let‚Äôs face it, pretty dull. It really only connects to WiFi and MQTT and sits idle. So let‚Äôs add a basic <a href="https://esphome.io/components/switch/gpio.html">GPIO switch</a>! The GPIO switch component in esphomelib allows you to control the ON/OFF state of any of the pins on your ESP. For example, if you add this configuration to the bottom of your YAML file, you‚Äôre setting up the pin <code>GPIO5</code> to be controlled as a switch with the name ‚ÄúLiving Room Dehumidifer‚Äù.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="yaml"><span class="na">switch</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">gpio</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Dehumidifer"</span>
    <span class="na">pin</span><span class="pi">:</span> <span class="s">GPIO5</span>
</code></pre></div></div>
<p>If you now press upload again (this time the ESP doesn‚Äôt need to be connected via USB, as updates <a href="https://esphome.io/components/ota.html">can be done over WiFi</a>), you will see a switch show up in Home Assistant automatically through <a href="/docs/mqtt/discovery/">MQTT discovery</a>.</p>
<p class='img'>
  <img
    src='/images/blog/2018-06-esphomelib/switch.png'
    alt='esphomeyamls setup wizard.'>
  How the newly configured switch will show up in Home Assistant if <a href='/docs/mqtt/discovery/'>MQTT
  discovery</a> is enabled and a <a href='/integrations/group/'>default view</a> is used.
</p>
<p>Granted, this functionality would have been pretty simple with other projects too. But once you start adding <a href="https://esphome.io/index.html#light-components">lights</a>, <a href="https://esphome.io/index.html#cover-components">covers</a> and <a href="https://esphome.io/index.html#sensor-components">other sensors</a>, esphomelib‚Äôs modular design really starts to shine.</p>
<h2>See Also</h2>
<ul>
<li><a href="https://esphome.io/guides/">View the full getting started guide (including how to migrate from other projects)</a></li>
<li><a href="https://esphome.io/#devices">Device-specific setup guides</a></li>
<li><a href="https://esphome.io/">List of supported sensors/actuators</a></li>
<li>Join the <a href="https://discord.gg/KhAMKrd">discord server</a> if you need help.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266 and MicroPython - Part 2]]></title>
    <link href="https://ivangrod.github.io/blog/2016/08/31/esp8266-and-micropython-part2/"/>
    <updated>2016-08-31T04:17:25+00:00</updated>
    <id>https://ivangrod.github.io/blog/2016/08/31/esp8266-and-micropython-part2</id>
    <content type="html"><![CDATA[<img src='/images/blog/2016-07-micropython/micropython.png' style='clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;' width='200' />
So, part 1 of [ESP8266 and MicroPython](/blog/2016/07/28/esp8266-and-micropython-part1/) was pretty lame, right? Instead of getting information out of Home Assistant we are going a step forward and create our own sensor which is sending details about its state to a Home Assistant instance.
<!--more-->
<p>Beside <a href="https://en.wikipedia.org/wiki/POST_(HTTP)">HTTP POST</a> requests, MQTT is the quickest way (from the author‚Äôs point of view) to publish information with DIY devices.</p>
<p>You have to make a decision: Do you want to pull or to <a href="https://en.wikipedia.org/wiki/Polling_(computer_science)">poll</a> the information for the sensor? For slowly changing values like temperature it‚Äôs perfectly fine to wait a couple of seconds to retrieve the value. If it‚Äôs a motion detector the state change should be available instantly in Home Assistant or it could be missed. This means the sensor must take initiative and send the data to Home Assistant.</p>
<p>An example for pulling is <a href="/integrations/arest#sensor">aREST</a>. This is a great way to work with the ESP8266 based units and the Ardunio IDE.</p>
<h2>MQTT</h2>
<p>You can find a simple examples for publishing and subscribing with MQTT in the <a href="https://github.com/micropython/micropython-lib">MicroPython</a> library overview in the section for <a href="https://github.com/micropython/micropython-lib/tree/master/micropython/umqtt.simple">umqtt</a>.</p>
<p>The example below is adopted from the work of <a href="https://github.com/davea">@davea</a> as we don‚Äôt want to re-invent the wheel. The configuration feature is crafty and simplyfies the code with the usage of a file called <code>/config.json</code> which stores the configuration details. The ESP8266 device will send the value of a pin every 5 seconds.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="python"><span class="kn">import</span> <span class="n">machine</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">ubinascii</span>
<span class="kn">import</span> <span class="n">webrepl</span>

<span class="kn">from</span> <span class="n">umqtt.simple</span> <span class="kn">import</span> <span class="n">MQTTClient</span>

<span class="c1"># These defaults are overwritten with the contents of /config.json by load_config()
</span><span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">broker</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">192.168.1.19</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">sensor_pin</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">client_id</span><span class="sh">"</span><span class="p">:</span> <span class="sa">b</span><span class="sh">"</span><span class="s">esp8266_</span><span class="sh">"</span> <span class="o">+</span> <span class="n">ubinascii</span><span class="p">.</span><span class="nf">hexlify</span><span class="p">(</span><span class="n">machine</span><span class="p">.</span><span class="nf">unique_id</span><span class="p">()),</span>
    <span class="sh">"</span><span class="s">topic</span><span class="sh">"</span><span class="p">:</span> <span class="sa">b</span><span class="sh">"</span><span class="s">home</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">client</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">sensor_pin</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">setup_pins</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">sensor_pin</span>
    <span class="n">sensor_pin</span> <span class="o">=</span> <span class="n">machine</span><span class="p">.</span><span class="nc">ADC</span><span class="p">(</span><span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">sensor_pin</span><span class="sh">'</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">load_config</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">ujson</span> <span class="k">as</span> <span class="n">json</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/config.json</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">config</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
    <span class="nf">except </span><span class="p">(</span><span class="nb">OSError</span><span class="p">,</span> <span class="nb">ValueError</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Couldn</span><span class="sh">'</span><span class="s">t load /config.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">save_config</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">CONFIG</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Loaded config from /config.json</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">save_config</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">ujson</span> <span class="k">as</span> <span class="n">json</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/config.json</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">CONFIG</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">OSError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Couldn</span><span class="sh">'</span><span class="s">t save /config.json</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">MQTTClient</span><span class="p">(</span><span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">client_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">broker</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Connected to {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">broker</span><span class="sh">'</span><span class="p">]))</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">sensor_pin</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
        <span class="n">client</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="sh">'</span><span class="s">{}/{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">topic</span><span class="sh">'</span><span class="p">],</span>
                                          <span class="n">CONFIG</span><span class="p">[</span><span class="sh">'</span><span class="s">client_id</span><span class="sh">'</span><span class="p">]),</span>
                                          <span class="nf">bytes</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Sensor state: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">load_config</span><span class="p">()</span>
    <span class="nf">setup_pins</span><span class="p">()</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>
<p>Subscribe to the topic <code>home/#</code> or create a <a href="/integrations/sensor.mqtt/">MQTT sensor</a> to check if the sensor values are published.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash">mosquitto_sub <span class="nt">-h</span> 192.168.1.19 <span class="nt">-v</span> <span class="nt">-t</span> <span class="s2">"home/#"</span>
</code></pre></div></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="yaml"><span class="na">sensor</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">mqtt</span>
    <span class="na">state_topic</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home/esp8266_[last</span><span class="nv"> </span><span class="s">part</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">MAC</span><span class="nv"> </span><span class="s">address]"</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MicroPython"</span>
</code></pre></div></div>
<p><a href="https://github.com/davea">@davea</a> created <a href="https://github.com/davea/sonoff-mqtt">sonoff-mqtt</a>. This code will work on ESP8622 based devices too and shows how to use a button to control a relay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266 and MicroPython - Part 1]]></title>
    <link href="https://ivangrod.github.io/blog/2016/07/28/esp8266-and-micropython-part1/"/>
    <updated>2016-07-28T04:00:00+00:00</updated>
    <id>https://ivangrod.github.io/blog/2016/07/28/esp8266-and-micropython-part1</id>
    <content type="html"><![CDATA[<img src='/images/blog/2016-07-micropython/micropython.png' style='clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;' width='200' />
The first release of Micropython for ESP8266 was delivered a couple of weeks ago. The [documentation](http://docs.micropython.org/en/latest/) covers a lot of ground. This post is providing only a little summary which should get you started.
<p>Until a couple of weeks ago, the pre-built MicroPython binary for the ESP8266 was only available to backers of the Kickstarter campaign. This has changed now and it is available to the public for <a href="https://micropython.org/download/#esp8266">download</a>.</p>
<!--more-->
<p>The easiest way is to use <a href="https://github.com/espressif/esptool">esptool.py</a> for firmware handling tasks. First erase the flash:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>python esptool.py <span class="nt">--port</span> /dev/ttyUSB0 erase_flash
esptool.py v1.0.2-dev
Connecting...
Erasing flash <span class="o">(</span>this may take a <span class="k">while</span><span class="o">)</span>...
</code></pre></div></div>
<p>and then load the firmware. You may adjust the file name of the firmware binary.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>python esptool.py <span class="nt">--port</span> /dev/ttyUSB0 <span class="nt">--baud</span> 460800 write_flash <span class="nt">--flash_size</span><span class="o">=</span>8m 0 esp8266-2016-07-10-v1.8.2.bin
esptool.py v1.2-dev
Connecting...
Running Cesanta flasher stub...
Flash params <span class="nb">set </span>to 0x0020
Writing 540672 @ 0x0... 540672 <span class="o">(</span>100 %<span class="o">)</span>
Wrote 540672 bytes at 0x0 <span class="k">in </span>13.1 seconds <span class="o">(</span>330.8 kbit/s<span class="o">)</span>...
Leaving...
</code></pre></div></div>
<p>Now reset the device. You should then be able to use the <a href="http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html#getting-a-micropython-repl-prompt">REPL (Read Evaluate Print Loop)</a>. On Linux there is <code>minicom</code> or <code>picocom</code>, on a Mac you can use <code>screen</code> (eg. <code>screen /dev/tty.SLAB_USBtoUART 115200</code>), and on Windows there is Putty to open a serial connection and get the REPL prompt.</p>
<p>The <a href="http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html#webrepl-a-prompt-over-wifi">WebREPL</a> work over a wireless connection and allows easy access to a prompt in your browser. An instance of the WebREPL client is hosted at <a href="http://micropython.org/webrepl">http://micropython.org/webrepl</a>. Alternatively, you can create a local clone of their <a href="https://github.com/micropython/webrepl">GitHub repository</a>. This is necessary if your want to use the command-line tool <code>webrepl_cli.py</code> which is mentionend later in this post.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>minicom <span class="nt">-D</span> /dev/ttyUSB0
<span class="c">#4 ets_task(4020e374, 29, 3fff70e8, 10)</span>
WebREPL daemon started on ws://192.168.4.1:8266
Started webrepl <span class="k">in </span>setup mode
could not open file <span class="s1">'main.py'</span> <span class="k">for </span>reading

<span class="c">#5 ets_task(4010035c, 3, 3fff6360, 4)</span>
MicroPython v1.8.2-9-g805c2b9 on 2016-07-10<span class="p">;</span> ESP module with ESP8266
Type <span class="s2">"help()"</span> <span class="k">for </span>more information.
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>
<div class="alert alert-note">
  <p class="alert-title"><iconify-icon inline icon='mdi:information-outline'></iconify-icon> Note</p>
  <div class="alert-content">
<p>The public build of the firmware may be different than the firmware distributed to the backers of the Kickstarter campaign. Especially in regard of the <a href="http://docs.micropython.org/en/latest/esp8266/quickref.html">available modules</a>, turned on debug messages, and alike. Also, the WebREPL may not be started by default.</p>
  </div>
</div>
<p>Connect a LED to pin 5 (or another pin of your choosing) to check if the ESP8266 is working as expected.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">machine</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pin</span> <span class="o">=</span> <span class="n">machine</span><span class="p">.</span><span class="nc">Pin</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">machine</span><span class="p">.</span><span class="n">Pin</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pin</span><span class="p">.</span><span class="nf">high</span><span class="p">()</span>
</code></pre></div></div>
<p>You can toogle the LED by changing its state with <code>pin.high()</code> and <code>pin.low()</code>.</p>
<p>Various ESP8266 development board are shipped with an onboard photocell or a light dependent resistors (LDR) connected to the analog pin of your ESP8266 check if you are able to obtain a value.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">machine</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">brightness</span> <span class="o">=</span> <span class="n">machine</span><span class="p">.</span><span class="nc">ADC</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">brightness</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div></div>
<p>Make sure that you are familiar with REPL and WebREPL because this will be needed soon. Keep in mind the password for the WebREPL access.</p>
<p>Read the <a href="http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html">instructions</a> about how to setup your wireless connection. Basically you need to upload a <code>boot.py</code> file to the microcontroller and this file is taking care of the connection setup. Below you find a sample which is more or less the same as shown in the <a href="http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html#configuration-of-the-wifi">documentation</a>.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="python"><span class="k">def</span> <span class="nf">do_connect</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">network</span>

    <span class="n">SSID</span> <span class="o">=</span> <span class="sh">'</span><span class="s">SSID</span><span class="sh">'</span>
    <span class="n">PASSWORD</span> <span class="o">=</span> <span class="sh">'</span><span class="s">PASSWORD</span><span class="sh">'</span>

    <span class="n">sta_if</span> <span class="o">=</span> <span class="n">network</span><span class="p">.</span><span class="nc">WLAN</span><span class="p">(</span><span class="n">network</span><span class="p">.</span><span class="n">STA_IF</span><span class="p">)</span>
    <span class="n">ap_if</span> <span class="o">=</span> <span class="n">network</span><span class="p">.</span><span class="nc">WLAN</span><span class="p">(</span><span class="n">network</span><span class="p">.</span><span class="n">AP_IF</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">ap_if</span><span class="p">.</span><span class="nf">active</span><span class="p">():</span>
        <span class="n">ap_if</span><span class="p">.</span><span class="nf">active</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">sta_if</span><span class="p">.</span><span class="nf">isconnected</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">connecting to network...</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">sta_if</span><span class="p">.</span><span class="nf">active</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">sta_if</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">SSID</span><span class="p">,</span> <span class="n">PASSWORD</span><span class="p">)</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">sta_if</span><span class="p">.</span><span class="nf">isconnected</span><span class="p">():</span>
            <span class="k">pass</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Network configuration:</span><span class="sh">'</span><span class="p">,</span> <span class="n">sta_if</span><span class="p">.</span><span class="nf">ifconfig</span><span class="p">())</span>
</code></pre></div></div>
<p>Upload this file with <code>webrepl_cli.py</code> or the WebREPL:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash">python webrepl_cli.py boot.py 192.168.4.1:/boot.py
</code></pre></div></div>
<p>If you reboot, you should see your current IP address in the terminal.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="bash"><span class="o">&gt;&gt;&gt;</span> Network configuration: <span class="o">(</span><span class="s1">'192.168.0.10'</span>, <span class="s1">'255.255.255.0'</span>, <span class="s1">'192.168.0.1'</span>, <span class="s1">'192.168.0.1'</span><span class="o">)</span>
</code></pre></div></div>
<p>First let‚Äôs create a little consumer for Home Assistant sensor‚Äôs state. The code to place in <code>main.py</code> is a mixture of code from above and the <a href="https://developers.home-assistant.io/docs/api/rest/">RESTful API</a> of Home Assistant. If the temperature in the kitchen is higher than 20 ¬∞C then the LED connected to pin 5 is switched on.</p>
<div class="alert alert-warning">
  <p class="alert-title"><iconify-icon inline icon='mdi:alert-outline'></iconify-icon> Warning</p>
  <div class="alert-content">
<p>If a module is missing then you need to download it from the <a href="https://github.com/micropython/micropython-lib">MicroPython Library overview</a> and upload it to the ESP8266 with <code>webrepl_cli.py</code> manually.</p>
  </div>
</div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="python"><span class="c1"># Sample code to request the state of a Home Assistant entity.
</span>
<span class="n">API_PASSWORD</span> <span class="o">=</span> <span class="sh">'</span><span class="s">YOUR_PASSWORD</span><span class="sh">'</span>
<span class="n">URL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://192.168.0.5:8123/api/states/</span><span class="sh">'</span>
<span class="n">ENTITY</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sensor.kitchen_temperature</span><span class="sh">'</span>
<span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">PIN</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">urequests</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">{}{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">ENTITY</span><span class="p">)</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">x-ha-access</span><span class="sh">'</span><span class="p">:</span> <span class="n">API_PASSWORD</span><span class="p">,</span>
               <span class="sh">'</span><span class="s">content-type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">application/json</span><span class="sh">'</span><span class="p">}</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">urequests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()[</span><span class="sh">'</span><span class="s">state</span><span class="sh">'</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">machine</span>
    <span class="kn">import</span> <span class="n">time</span>

    <span class="n">pin</span> <span class="o">=</span> <span class="n">machine</span><span class="p">.</span><span class="nc">Pin</span><span class="p">(</span><span class="n">PIN</span><span class="p">,</span> <span class="n">machine</span><span class="p">.</span><span class="n">Pin</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">int</span><span class="p">(</span><span class="nf">get_data</span><span class="p">())</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="p">:</span>
                <span class="n">pin</span><span class="p">.</span><span class="nf">high</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">pin</span><span class="p">.</span><span class="nf">low</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">TypeError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">TIMEOUT</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Get the state of {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">ENTITY</span><span class="p">))</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>
<p>Upload <code>main.py</code> the same way as <code>boot.py</code>. After a reboot (<code>&gt;&gt;&gt; import machine</code> and <code>&gt;&gt;&gt; machine.reboot()</code>) or power-cycling your physical notifier is ready.</p>
<p>If you run into trouble, press ‚ÄúCtrl+c‚Äù in the REPL to stop the execution of the code, enter <code>&gt;&gt;&gt; import webrepl</code> and <code>&gt;&gt;&gt; webrepl.start()</code>, and upload your fixed file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Report the temperature with ESP8266 to MQTT]]></title>
    <link href="https://ivangrod.github.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt/"/>
    <updated>2015-10-11T19:10:00+00:00</updated>
    <id>https://ivangrod.github.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt</id>
    <content type="html"><![CDATA[<p>{::options coderay_line_numbers=‚Äútable‚Äù /}</p>
<p>I recently learned about the ESP8266, a $5 chip that includes WiFi and is Arduino compatible. This means that all your DIY projects can now be done for a fraction of the price.</p>
<p>For this tutorial, I‚Äôll walk through how to get going with ESP8266, get the temperature and humidity and report it to MQTT where Home Assistant can pick it up.</p>
<p class='img'>
<img src='/images/blog/2015-10-esp8266-temp/setup.png' />
Picture of the final setup (+ 2 LED for decoration)
</p>
<p class='img'>
<img src='/images/blog/2015-10-esp8266-temp/ha-sensor.png' />
Home Assistant will keep track of historical values and allow you to integrate it into automation.
</p>
<!--more-->
<h3>Components</h3>
<p>I‚Äôve been using Adafruit for my shopping:</p>
<ul>
<li><a href="http://www.adafruit.com/product/2471">Adafruit HUZZAH ESP8266 Breakout</a> (<a href="https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout/assembly">assembly instructions</a>)</li>
<li><a href="http://www.adafruit.com/product/2635">Adafruit HDC1008 Temperature &amp; Humidity Sensor Breakout Board</a> (<a href="https://learn.adafruit.com/adafruit-hdc1008-temperature-and-humidity-sensor-breakout/assembly">assembly instructions</a>)</li>
<li><a href="/integrations/mqtt/#picking-a-broker">MQTT server</a></li>
</ul>
<p><em>Besides this, you will need the usual hardware prototype equipment: a breadboard, some wires, soldering iron + wire, Serial USB cable.</em></p>
<h3>Alternatives</h3>
<p>Since this article has been published the HDC1008 has been discontinued. Updated sketches are available for the following alternatives:</p>
<ul>
<li><a href="https://www.adafruit.com/product/385">DHT22 sensor</a> and <a href="https://gist.github.com/balloob/1176b6d87c2816bd07919ce6e29a19e9">updated sketch</a>.</li>
<li><a href="https://www.adafruit.com/product/2652">BME280 sensor</a> and <a href="https://gist.github.com/mtl010957/9ee85fb404f65e15c440b08c659c0419">updated sketch</a>.</li>
</ul>
<h3>Connections</h3>
<p>On your breadboard, make the following connections from your ESP8266 to the HDC1008:</p>
<table>
<thead>
<tr>
<th>ESP8266</th>
<th>HDC1008</th>
</tr>
</thead>
<tbody>
<tr>
<td>GND</td>
<td>GND</td>
</tr>
<tr>
<td>3V</td>
<td>Vin</td>
</tr>
<tr>
<td>14</td>
<td>SCL</td>
</tr>
<tr>
<td>#2</td>
<td>SDA</td>
</tr>
</tbody>
</table>
<p><em>I picked <code>#2</code> and <code>14</code> myself, you can configure them in the sketch.</em></p>
<h3>Preparing your IDE</h3>
<p>Follow <a href="https://github.com/esp8266/Arduino#installing-with-boards-manager">these instructions</a> on how to install and prepare the Arduino IDE for ESP8266 development.</p>
<p>After you‚Äôre done installing, open the Arduino IDE, in the menu click on <code>sketch</code> -&gt; <code>include library</code> -&gt; <code>manage libraries</code> and install the following libraries:</p>
<ul>
<li>PubSubClient by Nick ‚ÄôO Leary</li>
<li>Adafruit HDC1000</li>
</ul>
<h3>Sketch</h3>
<p>If you have followed the previous steps, you‚Äôre all set.</p>
<ul>
<li>Open Arduino IDE and create a new sketch (<code>File</code> -&gt; <code>New</code>)</li>
<li>Copy and paste the below sketch to the Arduino IDE</li>
<li>Adjust the values line 6 - 14 to match your setup</li>
<li>Optional: If you want to connect to an MQTT server without a username or password, adjust line 62.</li>
<li>To have the ESP8266 accept our new sketch, we have to put it in upload mode. On the ESP8266 device keep the GPIO0 button pressed while pressing the reset button. The red led will glow half bright to indicate it is in upload mode.</li>
<li>Press the upload button in Arduino IDE</li>
<li>Open the serial monitor (<code>Tools</code> -&gt; <code>Serial Monitor</code>) to see the output from your device</li>
</ul>
<p>This sketch will connect to your WiFi network and MQTT broker. It will read the temperature and humidity from the sensor every second. It will report it to the MQTT server if the difference is &gt; 1 since last reported value. Reports to the MQTT broker are sent with retain set to <code>True</code>. This means that anyone connecting to the MQTT topic will automatically be notified of the last reported value.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;ESP8266WiFi.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Wire.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;PubSubClient.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_HDC1000.h&gt;</span><span class="cp">
</span>
<span class="cp">#define wifi_ssid "YOUR WIFI SSID"
#define wifi_password "WIFI PASSWORD"
</span>
<span class="cp">#define mqtt_server "YOUR_MQTT_SERVER_HOST"
#define mqtt_user "your_username"
#define mqtt_password "your_password"
</span>
<span class="cp">#define humidity_topic "sensor/humidity"
#define temperature_topic "sensor/temperature"
</span>
<span class="n">WiFiClient</span> <span class="n">espClient</span><span class="p">;</span>
<span class="n">PubSubClient</span> <span class="nf">client</span><span class="p">(</span><span class="n">espClient</span><span class="p">);</span>
<span class="n">Adafruit_HDC1000</span> <span class="n">hdc</span> <span class="o">=</span> <span class="n">Adafruit_HDC1000</span><span class="p">();</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="n">setup_wifi</span><span class="p">();</span>
  <span class="n">client</span><span class="p">.</span><span class="n">setServer</span><span class="p">(</span><span class="n">mqtt_server</span><span class="p">,</span> <span class="mi">1883</span><span class="p">);</span>

  <span class="c1">// Set SDA and SDL ports</span>
  <span class="n">Wire</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">14</span><span class="p">);</span>

  <span class="c1">// Start sensor</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hdc</span><span class="p">.</span><span class="n">begin</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Couldn't find sensor!"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup_wifi</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  <span class="c1">// We start by connecting to a WiFi network</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Connecting to "</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">wifi_ssid</span><span class="p">);</span>

  <span class="n">WiFi</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">wifi_ssid</span><span class="p">,</span> <span class="n">wifi_password</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">status</span><span class="p">()</span> <span class="o">!=</span> <span class="n">WL_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"."</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"WiFi connected"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"IP address: "</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">localIP</span><span class="p">());</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">reconnect</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Loop until we're reconnected</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">client</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Attempting MQTT connection..."</span><span class="p">);</span>
    <span class="c1">// Attempt to connect</span>
    <span class="c1">// If you do not want to use a username and password, change next line to</span>
    <span class="c1">// if (client.connect("ESP8266Client")) {</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">"ESP8266Client"</span><span class="p">,</span> <span class="n">mqtt_user</span><span class="p">,</span> <span class="n">mqtt_password</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"connected"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"failed, rc="</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="p">());</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">" try again in 5 seconds"</span><span class="p">);</span>
      <span class="c1">// Wait 5 seconds before retrying</span>
      <span class="n">delay</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">checkBound</span><span class="p">(</span><span class="kt">float</span> <span class="n">newValue</span><span class="p">,</span> <span class="kt">float</span> <span class="n">prevValue</span><span class="p">,</span> <span class="kt">float</span> <span class="n">maxDiff</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">!</span><span class="n">isnan</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
         <span class="p">(</span><span class="n">newValue</span> <span class="o">&lt;</span> <span class="n">prevValue</span> <span class="o">-</span> <span class="n">maxDiff</span> <span class="o">||</span> <span class="n">newValue</span> <span class="o">&gt;</span> <span class="n">prevValue</span> <span class="o">+</span> <span class="n">maxDiff</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">long</span> <span class="n">lastMsg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">temp</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">hum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">diff</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">client</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">reconnect</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="n">client</span><span class="p">.</span><span class="n">loop</span><span class="p">();</span>

  <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">lastMsg</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">lastMsg</span> <span class="o">=</span> <span class="n">now</span><span class="p">;</span>

    <span class="kt">float</span> <span class="n">newTemp</span> <span class="o">=</span> <span class="n">hdc</span><span class="p">.</span><span class="n">readTemperature</span><span class="p">();</span>
    <span class="kt">float</span> <span class="n">newHum</span> <span class="o">=</span> <span class="n">hdc</span><span class="p">.</span><span class="n">readHumidity</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">checkBound</span><span class="p">(</span><span class="n">newTemp</span><span class="p">,</span> <span class="n">temp</span><span class="p">,</span> <span class="n">diff</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">temp</span> <span class="o">=</span> <span class="n">newTemp</span><span class="p">;</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"New temperature:"</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="n">temp</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="n">client</span><span class="p">.</span><span class="n">publish</span><span class="p">(</span><span class="n">temperature_topic</span><span class="p">,</span> <span class="n">String</span><span class="p">(</span><span class="n">temp</span><span class="p">).</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">true</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">checkBound</span><span class="p">(</span><span class="n">newHum</span><span class="p">,</span> <span class="n">hum</span><span class="p">,</span> <span class="n">diff</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">hum</span> <span class="o">=</span> <span class="n">newHum</span><span class="p">;</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"New humidity:"</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="n">hum</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="n">client</span><span class="p">.</span><span class="n">publish</span><span class="p">(</span><span class="n">humidity_topic</span><span class="p">,</span> <span class="n">String</span><span class="p">(</span><span class="n">hum</span><span class="p">).</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">true</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3>Configuring Home Assistant</h3>
<p>The last step is to integrate the sensor values into Home Assistant. This can be done by setting up Home Assistant to connect to the MQTT broker and subscribe to the sensor topics.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code data-lang="yaml"><span class="na">mqtt</span><span class="pi">:</span>
  <span class="na">broker</span><span class="pi">:</span> <span class="s">YOUR_MQTT_SERVER_HOST</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">your_username</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">your_password</span>

<span class="na">sensor</span><span class="pi">:</span>
  <span class="na">platform</span><span class="pi">:</span> <span class="s">mqtt</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Temperature"</span>
  <span class="na">state_topic</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sensor/temperature"</span>
  <span class="na">qos</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">unit_of_measurement</span><span class="pi">:</span> <span class="s2">"</span><span class="s">¬∫C"</span>

<span class="na">sensor 2</span><span class="pi">:</span>
  <span class="na">platform</span><span class="pi">:</span> <span class="s">mqtt</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Humidity"</span>
  <span class="na">state_topic</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sensor/humidity"</span>
  <span class="na">qos</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">unit_of_measurement</span><span class="pi">:</span> <span class="s2">"</span><span class="s">%"</span>
</code></pre></div></div>
]]></content>
  </entry>
  
</feed>
